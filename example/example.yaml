#
#  imagenie example yaml file.
#
#     The following file is an attempt to document and illustrate the usage
#     for the imagenie tool.  The file is broken into four major sections:
#       1.  Global settings
#       2.  Common context variables
#       3.  Items
#       4.  Outputs
#
#     Each section is documented below, before it's usage.  In this example
#     we have been tasked
#

#
#   Section 1.  Global settings
#
#     Currently, the only available global setting is the path to the font-
#     file to be used when rasterizing text for any text overlays.
#
#     In case of this example, we set this to point at the
#     `UbuntuMono-Bold.ttf` file available in the `assets` directory.
#
fontpath: ./assets/UbuntuMono-Bold.ttf
output_format: jpeg

#
#   Section 2.  Common context variables
#
#     The context is the data that we wish to have available to each
#     output step.  The context is merged with each individual item
#     being processed from the `items` section below.
#
#     In this case, we define the planet and the date when the gophers
#     visited.
#
context:
  planet_name: plutgo    # Name of the planet that the i'th gopher has visited
  visit_date: 07/29/2017 # Date that he visited the planet

#
#   Section 3.  Items
#
#     The items section contains a list of objects that have a bunch of
#     (key,value) pairs.  These can be arbitrary and will be used to inject
#     values into any of the template strings in the "outputs" section.
#
#     In this case, the `gopher_name` and `gopher_id` will be merged with
#     the context above for each gopher and run against the outputs.
#
items:
  - gopher_name: Gonzo
    gopher_id: 1
  - gopher_name: Gobi
    gopher_id: 2
  - gopher_name: Goose
    gopher_id: 3
  - gopher_name: Goober
    gopher_id: 4
  - gopher_name: Gong
    gopher_id: 5

#
#   Section 4.  Outputs
#
#   Each output can be thought of as a "job" which will be run on the
#   specified `background` image path.  The `prefix` will be appended
#   to the index of the item being generated.
#
#   In this case, we have only been asked to generate images with the
#   gopher's name, but you have a feeling that you might need to generate
#   their ID as well - so lets define two outputs: "name" and "name_with_id".
#   The "name_with_id" case will also generate a QR code with this gopher's
#   id in it.
#
outputs:
    #
    #  Overlays
    #
    #     Overlays are how we define what gets superimposed on the base image.
    #     Each overlay contains a `type` which is limited to "image", "qr" and
    #     "text".  Any other type will cause an error when the tool runs.
    #
    #     Each overlay has the same properties, all of which must be specified:
    #       type      -   type of overlay ["image", "qr", "text"]
    #       xoffset   -   offset in pixels from the left
    #       yoffset   -   offset in pixels from the top
    #       size      -   this is overlay specific, font size for text types
    #                     and the size of the image for qr and image types
    #       value     -   the data to be used for text / qr encoding (after
    #                     templating), in the event of image type overlays,
    #                     it is a path to the image.
    #
    #     The overlays also have some optional parameters to setup / override
    #     things like the background / foreground color.
    #
    #     In the first case we define two simple overlays, one for the text to
    #     declare the gopher's name and another to draw the gopher's image.
    #
  - prefix: name
    background: ./assets/bg.jpeg
    overlays:
      - type: text
        foreground: "#ff0000"
        background: "#00ff00+"
        xoffset: 40
        yoffset: 40
        size: 40
        template: "Hi, I am {{ .gopher_name }}!"
      - type: text
        foreground: "#00ff00"
        background: "transparent"
        xoffset: 40
        yoffset: 440
        size: 25
        template: "I visited {{ .planet_name }} on {{ .visit_date }}."
        #
        #  Image overlays
        #
        #       The template for the image is the path to the file you wish
        #       to use.  This allows us to choose a dynamic list of sequential
        #       (for example) images.
      - type: image
        rotation: 60
        xoffset: 320
        yoffset: 170
        template: ./assets/gopher.png

  - prefix: name_with_id
    background: ./assets/bg.jpeg
    #
    #  In this overlay section, we see an example of how to use the QR code
    #  type.
    overlays:
      - type: text
        foreground: "white"
        background: "transparent"
        xoffset: 40
        yoffset: 40
        size: 40
        template: "Hi, I am {{ .gopher_name }}!"
      - type: qr
        foreground: "#FF0000"
        background: "white"
        xoffset: 40
        yoffset: 140
        size: 256
        template: "Gopher {{ .gopher_name }} has ID : {{ .gopher_id }}"
      - type: image
        xoffset: 320
        yoffset: 170
        template: ./assets/gopher.png
      - type: text
        foreground: "white"
        background: "transparent"
        xoffset: 40
        yoffset: 440
        size: 25
        template: "I visited {{ .planet_name }} on {{ .visit_date }}."

